









TASK 1

    Part A
                                            Status              Responsible (Karl or Andreas)
    Implement in lexer:                                     
        - Multiplication                    Finished            Karl
        - Division                          Finished            Karl
        - Bool and                          Finished            Karl
        - Bool or                           Finished            Karl
        - Bool True                         None                Karl
        - Bool False                        None                Karl
        - Bool negation                     None                Karl
        - Int negation                      None                Karl


    Implement in parser:
        - Multiplication                    Finished            Karl
        - Division                          Finished            Karl
        - Bool and                          Finished            Karl
        - Bool or                           Finished            Karl
        - Bool True                         None                Karl
        - Bool False                        None                Karl
        - Bool negation                     None                Karl
        - Int negation                      None                Karl


    Implement in interpreter:
        - Multiplication                    None                Karl
        - Division                          None                Karl
        - Bool and                          None                Karl
        - Bool or                           None                Karl
        - Bool True                         None                Karl
        - Bool False                        None                Karl
        - Bool negation                     None                Karl
        - Int negation                      None                Karl


    Implement in Type checker:
        - Multiplication                    None
        - Division                          None
        - Bool and                          None
        - Bool or                           None
        - Bool True                         None
        - Bool False                        None
        - Bool negation                     None
        - Int negation                      None


    Implement in RISC-V code generator:
        - Multiplication                    None
        - Division                          None
        - Bool and                          None
        - Bool or                           None
        - Bool True                         None
        - Bool False                        None
        - Bool negation                     None
        - Int negation                      None

    Part B
    
    Implement in parser and  lexer:
        - Multiple-declaration lets         None


TASK 2                                          

    Implement in lexer:
        - replicate                         None
        - filter                            None                Andreas
        - scan                              None                                     


    Implement in parser:
        - replicate                         None
        - filter                            None                Andreas
        - scan                              None         


    Implement in interpreter:
        - replicate                         None
        - filter                            None                Andreas
        - scan                              None         


    Implement in Type checker:
        - replicate                         None
        - filter                            None                Andreas
        - scan                              None          


    Implement in RISC-V code generator:
        - replicate                         None
        - filter                            None                Andreas
        - scan                              None           



TASK 3




TASK 4 (BONUS)





TESTING













NOTES
    - How does stronger binding / precedence occur? How to implement in Parser.fsp. Idea how early in Exp definition                     Karl 